In Java, variables are categorized based on their declaration location and accessibility, which defines their scope and lifetime.
1. Local Variables:
Declaration:
Declared inside a method, constructor, or a block of code. 
Scope:
Accessible only within the method, constructor, or block where they are declared. They are not visible or usable outside of their defining scope. 
Lifetime:
Created when the method, constructor, or block is entered, and destroyed when it completes execution. 
Initialization:
Must be explicitly initialized before use; they do not receive default values.
Example:
Java

public void myMethod() {
    int localVariable = 10; // local variable
    System.out.println(localVariable); 
}
2. Global Variables (Instance Variables and Class Variables):
In Java, the term "global variable" is typically used to refer to variables declared at the class level, outside of any method or constructor. These are specifically categorized as:
Instance Variables (Non-static fields):
Declaration: Declared inside a class but outside any method, constructor, or block, and without the static keyword.
Scope: Accessible by all methods within the class, and each object of the class gets its own copy of these variables.
Lifetime: Created when an object of the class is instantiated and destroyed when the object is garbage-collected.
Initialization: Automatically initialized to default values (e.g., 0 for numeric types, false for booleans, null for objects) if not explicitly initialized.
Class Variables (Static fields):
Declaration: Declared inside a class but outside any method, constructor, or block, and with the static keyword.
Scope: Accessible by all methods within the class, and there is only one copy of the variable shared among all objects of the class.
Lifetime: Created when the class is loaded into memory and destroyed when the program terminates.
Initialization: Automatically initialized to default values if not explicitly initialized.
Example:
Java

public class MyClass {
    int instanceVariable; // instance variable
    static int classVariable; // class variable

    public void someMethod() {
        // Access instanceVariable and classVariable
    }
}
3. Block Variables:
Declaration: Variables declared within any block of code, typically delimited by curly braces {}. This includes variables declared within if statements, for loops, while loops, or any arbitrary code block.
Scope: Limited to the block in which they are declared. They are a specific type of local variable.
Lifetime: Exist only for the duration of the execution of that specific block.
Example:
Java

public void anotherMethod() {
    if (true) {
        int blockVariable = 20; // block variable
        System.out.println(blockVariable);
    }
    // blockVariable is not accessible here
}